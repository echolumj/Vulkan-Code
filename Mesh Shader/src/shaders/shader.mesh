/* Copyright (c) 2021, Sascha Willems
 *
 * SPDX-License-Identifier: MIT
 *
 */

#version 450
#extension GL_EXT_mesh_shader : require

layout ( push_constant ) uniform UBO 
{
	mat4 proj;
	mat4 model;
	mat4 view;
} ubo;


struct Vertex
{
	vec4 Position;
	vec4 Normal;
};

struct Meshlet
{
	uint vertices[64];
	uint indices[126*3]; // up to 126 triangles 126 * 3
	uint indexCount;
	uint vertexCount;
};

layout(binding = 1) readonly buffer Meshlets
{
	Meshlet meshlets[];
}g_Meshlet;


layout(binding = 0) readonly buffer Vertices
{
	Vertex vertices[];
}g_Vertex;


layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

layout(location = 0) out VertexOutput
{
	vec4 color;
} vertexOutput[];

//const vec4[3] positions = {
//	vec4( 0.0, -0.5, 0.0, 1.0),
//	vec4( 0.5,  0.5, 0.0, 1.0),
//	vec4(-0.5,  0.5, 0.0, 1.0)
//};

//const vec4[3] colors = {
//	vec4(0.0, 1.0, 0.0, 1.0),
//	vec4(0.0, 0.0, 1.0, 1.0),
//	vec4(1.0, 0.0, 0.0, 1.0)
//};

struct TaskPayload {
    uint pWorkGroupID[32];    
};

taskPayloadSharedEXT TaskPayload payload;


uint hash(uint a)
{
   a = (a+0x7ed55d16) + (a<<12);
   a = (a^0xc761c23c) ^ (a>>19);
   a = (a+0x165667b1) + (a<<5);
   a = (a+0xd3a2646c) ^ (a<<9);
   a = (a+0xfd7046c5) + (a<<3);
   a = (a^0xb55a4f09) ^ (a>>16);
   return a;
}

shared uint sharedint;

void main()
{
	uint mi = payload.pWorkGroupID[gl_WorkGroupID.x];//gl_GlobalInvocationID.x;
	
	uint mhash = hash(mi);
	vec3 mcolor = vec3(float(mhash & 255), float((mhash >> 8) & 255), float((mhash >> 16) & 255)) / 255.0;

	//===== Vertext Clip Position =====================
	for (uint i = 0; i < uint(g_Meshlet.meshlets[mi].vertexCount); i++)
	{
		uint vi = g_Meshlet.meshlets[mi].vertices[i];
		vertexOutput[i].color = vec4(mcolor, 1.0);
		gl_MeshVerticesEXT[i].gl_Position =  ubo.proj * ubo.view * ubo.model * g_Vertex.vertices[vi].Position;
	}


	//===== Index =====================
	for (uint i = 0; i < uint(g_Meshlet.meshlets[mi].indexCount);i = i+3)
	{
		gl_PrimitiveTriangleIndicesEXT[i/3] = uvec3(g_Meshlet.meshlets[mi].indices[i], 
		g_Meshlet.meshlets[mi].indices[i+1],
		g_Meshlet.meshlets[mi].indices[i+2]);
	}
	//===== Primitive Count =====================	
	SetMeshOutputsEXT(g_Meshlet.meshlets[mi].vertexCount, g_Meshlet.meshlets[mi].indexCount / 3);

}